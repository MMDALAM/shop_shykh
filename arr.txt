در Node.js، کار با آرایه‌ها و به‌روزرسانی آنها یکی از مباحث مهم است. در زیر، تمام حالت‌های متداول کار با آرایه‌ها شامل جستجو، فیلتر و به‌روزرسانی آورده شده است:

1. تعریف آرایه
let arr = [1, 2, 3, 4, 5];
2. جستجوی عناصر در آرایه
indexOf: پیدا کردن ایندکس یک عنصر.
let index = arr.indexOf(3); // 2
includes: بررسی وجود یک عنصر.
let exists = arr.includes(3); // true
3. فیلتر کردن آرایه
filter: فیلتر کردن عناصر بر اساس یک شرط مشخص.
let filteredArr = arr.filter(num => num > 2); // [3, 4, 5]
4. نقشه‌برداری از آرایه
map: ایجاد یک آرایه جدید با اعمال یک تابع به هر عنصر.
let mappedArr = arr.map(num => num * 2); // [2, 4, 6, 8, 10]
5. کاهش آرایه
reduce: کاهش آرایه به یک مقدار واحد.
let sum = arr.reduce((accumulator, currentValue) => accumulator + currentValue, 0); // 15
6. شامل کردن یا حذف عناصر
push: اضافه کردن عنصر به انتهای آرایه.
arr.push(6); // [1, 2, 3, 4, 5, 6]
pop: حذف آخرین عنصر از آرایه.
arr.pop(); // [1, 2, 3, 4, 5]
shift: حذف اولین عنصر از آرایه.
arr.shift(); // [2, 3, 4, 5]
unshift: اضافه کردن عنصر به ابتدای آرایه.
arr.unshift(1); // [1, 2, 3, 4, 5]
7. به‌روزرسانی عناصر
برای به‌روزرسانی یک عنصر مشخص:

arr[2] = 10; // [1, 2, 10, 4, 5]
8. ادغام آرایه‌ها
concat: ادغام چند آرایه.
let newArr = arr.concat([7, 8]); // [1, 2, 10, 4, 5, 7, 8]
9. چرخش و ترتیب‌بندی آرایه
sort: مرتب‌سازی آرایه. (به صورت پیش‌فرض به صورت حروفی)
let sortedArr = arr.sort((a, b) => a - b); // [1, 2, 4, 5, 10]
reverse: معکوس کردن ترتیب عناصر.
let reversedArr = arr.reverse(); // [5, 4, 10, 2, 1]
10. بررسی شرایط بر روی آرایه
every: بررسی اینکه آیا تمامی عناصر یک شرط را دارند یا خیر.
let allGreaterThanZero = arr.every(num => num > 0); // true
some: بررسی اینکه آیا حداقل یک عنصر شرط را دارد یا نه.
let anyGreaterThanThree = arr.some(num => num > 3); // true
اینها حالت‌های متداول و کاربردی کار با آرایه‌ها در Node.js هستند. با استفاده از این توابع می‌توانید عملیات متنوعی را بر روی آرایه‌ها انجام دهید.